# -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
# vim:expandtab:shiftwidth=4:tabstop=4:


### DOC URLS 

# {{ doc_url_Fileclasses }}

# {{ doc_url_Policies }}


#### fileclass definitions ####

FileClass even_files {
    definition { type == file and name == "*[02468]" }
    # only for policy matching, not to display in reports
    report = no;
}

FileClass odd_files {
    definition { type == file and name == "*[13579]" }
    report = no;
}

# fileclasses to display in reports (can still be used in policies)
FileClass empty_files {
    definition { type == file and size == 0 }
    # report = yes (default)
}
FileClass small_files {
    definition { type == file and size > 0 and size <= 16MB }
    # report = yes (default)
}
FileClass std_files {
    definition { type == file and size > 16MB and size <= 1GB }
}
FileClass big_files {
    definition { type == file and size > 1GB }
}
FileClass largedir {
    definition { type == directory and dircount > 10000 }
}


#empty dirs
Fileclass empty_dir {
    definition { type == directory and dircount == 0 }
}




#### policy A definition ####
#### Deleting old unused files #######

define_policy cleanup_files {
     status_manager = none;
     scope { type == file }
     # always log
     default_action = common.log;
     default_lru_sort_attr = none;
}


cleanup_files_rules {
    #ignore { last_mod < 1d }
    #ignore_fileclass = empty_files;
    #don't process entries in the namespace tree
    ignore { tree == "/robinhood_testfs/lost+found" }

    rule cleanup_files_unlink_file {
        target_fileclass = small_files;
        target_fileclass = std_files;
        target_fileclass = big_files;
        condition { last_mod > 1d }
        action = common.unlink;
    }

    # DEFAULT rule for other entries
    rule default {
    condition { last_mod < 1d }
    action = none;
    }
}

cleanup_files_parameters {
    lru_sort_attr = none;
}

cleanup_files_trigger {
    trigger_on = periodic;
    check_interval = 1m;
}


#### policy B definition ####
#### Deleting old unused empty directories #######

define_policy cleanup_empty_dirs {
     status_manager = none;
     scope { type == directory }
     # always log
     default_action = common.log;
     default_lru_sort_attr = none;
}

cleanup_empty_dirs_rules {
    #don't process entries in the namespace tree
    ignore { tree == "/robinhood_testfs/lost+found" }

    # remove empty directories after 30d
    rule rmdir_empty {
    target_fileclass = empty_dir;
    action = common.rmdir;
    condition { last_mod > 30d }
    }

    # DEFAULT rule for other entries
    rule default {
    condition { last_mod < 30d }
    action = none;
    }
}

cleanup_empty_dirs_parameters {
    lru_sort_attr = none;
}

cleanup_empty_dirs_trigger {
    trigger_on = periodic;
    check_interval = 1m;
}


########### end of policy rules ############






# OTHER
# clean when inode count > 100M
# some_name_trigger {
#    trigger_on = global_usage;
#    high_threshold_cnt = 100M;
#    low_threshold_cnt  = 100M;
#    check_interval     = 5min;
#}
